---
format: 
  revealjs:
    embed-resources: false
    slide-number: c/t
    keep-md: true
    theme: [default, style.scss]
    width: 1600
    height: 900
    footer: '<a href="https://www.fizzics.ie/">fizzics.ie</a>'
tab-border-collapse: collapse
menu:
  numbers: true
background-size: 50% 50%;
include-in-header:
  - text: |
      <link rel = "shortcut icon" href = "img/bullfinch.png" />
execute:
  echo: false
  warning: false
---

```{r}
#| label: libraries

library(tidyverse)
library(flipbookr)
library(ggtext)
library(worldfootballR)
library(gt)
library(sf)
library(rworldmap)
library(lwgeom)
library(paletteer)
```


```{r}
#| label: my_data
#| cache: true


es <- understat_league_match_results(league = "La liga", season_start_year = 2021) |> as_tibble()
teams <- es$home_team |> unique()
teams_meta <- understat_team_meta(teams) |>
  filter(year == 2022) |> 
  select(-year) |> 
  mutate(team_name = str_replace(team_name, "_", " "))

world_sf <- sf::st_as_sf(rworldmap::getMap(resolution = "low"))

lat <- c(seq(from=-90,to=90,by=0.25)) ## creates a sequence -90 to 90 by 0.25
lon <- c(rep(180,length(lat)),rep(-180,length(lat))) # creates a sequence of 180 and -180 longitudes
oceans.df <- data.frame("lon"=lon, "lat"=c(lat,lat)) ## combines the point in a data frame
oceans.sf <- st_as_sf(oceans.df,coords = c("lon","lat"), crs=4326) %>% 
  st_union() %>% # combines the points into a MULTIPOINT
  st_convex_hull() # gets the outline of the points

oceans_moll.sf <- st_as_sf(oceans.df,coords = c("lon","lat"), crs=4326) %>% 
  st_transform(crs="+proj=moll") %>% ## 
  st_union() %>% # combines the points into a MULTIPOINT
  st_convex_hull() # gets the outline of the points

my_cols <- c("#008000", "#1aff1a", "#802000", "#24478f", "#e6e600", "#7733ff", "#ff80aa")
```


#  {.title}

::: r-fit-text
R You Ready

[for interactive learning]{.flow}
:::

::: footer
:::

---

:::: {.columns}
::: {.column width="30%"}

### flipbookr {.textcenter}

![https://github.com/EvaMaeRey/flipbookr](images/hex-flipbookr.png){width=300}

- Evangeline Reynolds, Garrick Aden-Buie, and Emi Tanaka
- adapted for _quarto_ by Kieran Healy

:::
::: {.column width="30%"}

### learnr {.textcenter}

![https://rstudio.github.io/learnr/](images/learnr-hex.png){width=300}

- Garrick Aden-Buie, Barret Schloerke, JJ Allaire, and Alexander Rossell Hayes

:::
::: {.column width="30%"}

### exams {.textcenter}

![https://www.r-exams.org/](images/r-exams-logo.png){height=300}

- Achim Zeileis, Nikolaus Umlauf, and Friedrich Leisch

:::
::::

<!-- new revealjs slide -->

<!-- # {data-background="images/football.png"} -->

---

```{r}
#| label: footballer-pic
#| fig-align: center

knitr::include_graphics("images/football.png")
```

---

```{r}
#| label: flipbookexample
#| echo: false
#| eval: false

#es <- understat_league_match_results(league = "La liga", season_start_year = 2021) |> as_tibble
es |>
  filter(year(datetime) == "2022") |> 
  select(home_team, away_team, home_goals, away_goals, home_xG, away_xG) |> 
  pivot_longer(-c(home_goals, away_goals, home_xG, away_xG), names_to = "home", values_to = "team") |> 
  select(team, home, home_goals, away_goals, home_xG, away_xG) |> 
  mutate(excess = ifelse(home == "home_team", home_goals - home_xG, away_goals - away_xG)) |> 
  group_by(team) |>
  summarise(excess = mean(excess) |> round(3)) |> 
  ungroup() |> 
  arrange(excess |> desc()) |> 
  left_join(teams_meta, by = join_by(team == team_name)) |> 
  drop_na() |> 
  slice(c(1:4, 15:17)) |> 
  gt() |> 
  cols_label(team = "Team",
             excess = "Goal Excess",
             season = "Season",
             url = "Club Website") |> 
  cols_align(align = "center") |> 
  tab_options(column_labels.background.color = "cornflowerblue", 
              table.font.names = "Caveat",
              table.font.style = "oblique",
              table.font.size = 24,
              column_labels.font.weight = "bold",
              column_labels.vlines.width = 2,
              column_labels.vlines.color = "darkblue",
              column_labels.vlines.style = "solid",
              table_body.vlines.width = 2,
              table_body.hlines.width = 2,
              table_body.vlines.color = "darkblue",
              table_body.vlines.style = "solid"
  )

```

`r flipbookr:::chunq_reveal("flipbookexample", title = "flipbookr Runthrough", lcolw = "40", rcolw = "60", chunk_options = "fig.height = 10, fig.width = 10", smallcode = TRUE)`


---

```{r}
#| label: flipbookexample2
#| echo: false
#| eval: false

ggplot() + 
geom_sf(data=oceans_moll.sf, fill="#cce6ff") + 
geom_sf(data=world_sf |> st_transform(crs="+proj=moll"), 
aes(fill = NAME), show.legend = FALSE) + #BREAK
scale_fill_manual(values = rep(paletteer_d("MexBrewer::Naturaleza", n=7), 35)) + #ROTATE
scale_fill_manual(values = rep(paletteer_d("palettetown::crobat", n=7), 35)) + #ROTATE
scale_fill_manual(values = rep(paletteer_d("lisa::JosefAlbers", n=5), 50)) + #ROTATE
scale_fill_manual(values = rep(my_cols, 35)) +
theme_void()

```

`r flipbookr:::chunq_reveal("flipbookexample2", title = "flipbookr Runthrough", lcolw = "60", rcolw = "40", chunk_options = "fig.height = 8, fig.width = 8", smallcode = TRUE)`

## Advantages of `flipbookr`

- follows philosophy of `tidyverse` and `ggplot`

- empasises use of the pipe, |> 

- good coding practice

    - every line does one job and one job only


## Limitations of `flipbookr`

- really only useful for coding

- the `#ROTATE` option is a little picky

- careful not to use it too much

## Mechanics of `flipbookr`

- `install.package("flipbookr")`

    - works in `rmarkdown`

- `remotes::install_github("kjhealy/flipbookr@quarto")`

    - for `quarto` need the [keiranjhealy version](https://kieranhealy.org/blog/archives/2023/08/10/flipbookr-for-quarto/)

---

- make an r chunk of your code with options:

    - #| label: my_chunk_name
    - #| echo: false
    - #| eval: false
    
- below this, have inline r code using `chunq_reveal(chunk_name = "my_chunk_name")`

    - automatically gives two-column side-by-side format
    
- can set how lines are revealed

    - normally does it line by line (`break_type = "auto"`)
    - #BREAK to specify where to stop
    - #ROTATE to cycle between lines of code

## `learnr`


```{r palette-quiz, echo=FALSE}
xaringanExtra::embed_xaringan(url = "https://eugene-hickey.shinyapps.io/learnr-example1/", ratio = "16:9")
```

## Advantages of `learnr`

- typically take a quiz after 20 & 40 minutes of lecture

   - do this every time, students like the rhythm
   
- can do any topic, not just computing

- giving hints is very useful

## Disadvantages

- can't build randomness into questions

- I can't see feedback/answers from students

- is a bit flaky with `quarto`-style chunks

- need to publish on a shinyapps server

## Mechanics of `learnr`

- 3 step process

    1. create a quarto document to make a shiny app
    
    1. upload this on to a server such as shinyapps.io
    
    1. incorporate this within lecture slides
    
## 1. Making `learnr` app

- make a `quarto` document with the following `yaml`

```
    ---
    title: "My Exciting learnr Quiz"
    output: learnr::tutorial
    runtime: shiny_prerendered
    execute:
      echo: false
      warning: false
      message: false
    ---
```
---

- include a blank coding space with a code chunk headed like this:

```
    {r quiz_question, exercise=TRUE, exercise.eval = TRUE}
    
```

- include a hint with a code chunk headed like this:

```
    {r quiz_question-hint-1}
    
```
---

- can add MCQ's and checkbox quizzes using `quiz()` and `question()`

```
quiz(
  question("What is the capital city of France?",
    answer("Berlin"),
    answer("Bordeaux"),
    answer("Paris", correct = TRUE),
    answer("Rome")
  ),
  question("Which of the following are volcanoes?",
    answer("Kilamanjaro", correct = TRUE),
    answer("Everest"),
    answer("Etna", correct = TRUE),
    answer("Rainier", correct = TRUE)
  )
)

```
## 2. Upload to a shiny server

![](images/rstudio-publish.png)
---

![](images/shinyapps.png)

## 3. Add to lecture

- Add code chunk with:

```
    xaringanExtra::embed_xaringan(url = "https://eugene-hickey.shinyapps.io/my-learnr-example/", ratio = "16:9")
    
```


## `exams`

```{r}
#| label: soybeans
#| fig-align: center

knitr::include_graphics("images/soybeans.png")
```

---

```{r}
#| label: xray
#| fig-align: center

knitr::include_graphics("images/x-ray.png")
```

---

```{r}
#| label: dengue
#| fig-align: center

knitr::include_graphics("images/dna.png")
```


## Advantages of `exams`

- part of academic hosting platform ([moodle](https://moodle.org/), [blackboard](https://www.blackboard.com/), [canvas](https://www.instructure.com/canvas), etc)

- weekly ten question quiz

    - get three attempts
    - done in students time
    - they get instant feedback

- works for all subject matter

- can build in randomisation

- get marks back to lecturer


## Disadvantages of `exams`

- works best for moodle, not sure how good with other VLE's

- interactivity is tricky

- less _production ready_ than other tools

## Mechanics of `exams`

- 6 step process

    1. Generate data and solutions
    
    1. Create question text for student
    
    1. Create student feedback
        
    1. Generate meta-information
    
    1. Use `exams` package to make moodle-xml
    
    1. Upload this xml to moodle
    
- best to start with [r exams templates](https://www.r-exams.org/templates/)

---

## 1. Generate Data


```{r eval=F, echo=T}
{r data generation, echo = FALSE, results = "hide", 
message=FALSE, warning=FALSE}
library(tidyverse)
library(exams)
library(gt)
set.seed(42)
ok <- FALSE
while(!ok){
  x1 <- sample(1:20, 3)
  x2 <- sample(1:20, 3)
  my_soln <- x1 * x2
  ok <- !(sum(duplicated(my_soln)))
}
my_table <- tibble(
  x1 = x1, x2 = x2, 
  my_answers = c("##ANSWER1##", "##ANSWER2##", "##ANSWER3##")
  )
```

- note, `.Rmd` file with no `yaml`header.


## 2. Question Text

```{r eval=F, echo=T}
Question
========
In the table below, multiply _Value 1_ by _Value 2_ 
and type the answer in _Result_:

my_table |> 
  gt() |>  
  cols_label(x1 = "Value 1",
             x2 = "Value 2",
             my_answers = "Result")

```

## 3. Feedback

```{r eval=F, echo=T}
Solution
========
Use "Value 1" $\times$ "Value 2" to get result. 
The answers should be `r my_soln`.

```

## 4. Meta-Information

```{r eval=F, echo=T}
Meta-information
================
extype: cloze
exsolution: `r paste(my_soln, collapse = "|")`
exclozetype: num|num|num
exname: exams_example
extol: 0.05
exextra[numwidth,logical]: TRUE

```


## 5. Make Moodle XML

```{r eval=F, echo=T}
exams2moodle(file = "exams-example.Rmd", n = 100)
```

- this will make a file called _moodlequiz.xml_ with 100 exemplars of the quiz with different input values.

## 6. Upload to moodle

![](images/moodle-import.png)

---

![](images/moodle-question.png)


---


:::: columns
::: {.column width="60%"}
::: r-fit-text
Thank you!

|                                 |                   |
|---------------------------------|-------------------|
| {{< fa solid blog >}}    | [www.fizzics.ie/](https://www.fizzics.ie/)  |
| {{< fa brands orcid >}} | [0000-0001-9813-9323](https://orcid.org/my-orcid?orcid=0000-0001-9813-9323)|
| {{< fa brands mastodon >}}|[\@eugene100hickey](https://mastodon.social/@eugene100hickey)|
| {{< fa brands twitter >}} | [\@eugene100hickey](https://twitter.com/eugene100hickey)|
| {{< fa brands github >}}| [eugene100hickey.github.io/](https://github.com/eugene100hickey)|

   
:::
:::

::: {.column width="40%"}
::: {#fig-website}

<iframe onload='this.width=screen.width;this.height=screen.height*0.90;' src='https://www.fizzics.ie/projects'></iframe>

:::

:::
::::

## Summary

- R has some great packages for teaching

- we looked at three here:

    - `flipbookr` for walking through code chunks
    
    - `learnr` for producing little test questions in the middle of a lecture
    
    - `exams` for producing assessments to be run online
