library(matlab)
begin <- 20241
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".reat")
z |> str_subset(".anen")
z |> str_subset(".enan")
z |> str_subset("anne.")
z |> str_subset(".r.it")
5000*99/62.5
5/0.0528
z=.Last.value
z*5.49
z*.16
z*52.26
z*36.81
5.49/55
10/44
.9955/0.0042
.9955/0.0042*.227
.9955/0.0042*.227*28
library(msa)
BiocManager::install("msa")
library(msa)
library(tidyverse)
library(matlab)
begin <- 24007
end <- 25000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 42009
end <- 43000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 50429
end <- 60000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 25429
end <- 100000
my_step <- 10000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".ai.e")
.8/.58
.8/3.5
2e4/24
1/.Last.value/4//04^2
1/.Last.value/4/04^2
1/.Last.value/4/0.4^2
2e4/24
1/.Last.value/4/0.4^2
1.3939/0.775
1/4/0.16/756
1/4/0.16/781.25
library(tidyverse)
library(rlang)
library(glue)
# string to append to variable name
suffix <- "A"
# example data frame
dat <- tibble(x = 1:5) %>%
# create new variable with walrus operator
mutate(
"x_{suffix}" := x
)
# view data
dat
# select newly named column
dat %>%
dplyr::select(glue::glue("x_{suffix}"))
library(tidyverse)
library(matlab)
begin <- 30237
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 30238
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 30239
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset("stor.")
z |> str_subset("s.ort")
z |> str_subset("a.ile")
z |> str_subset("ho.ed")
library(tidyverse)
library(matlab)
begin <- 43001
end <- 44000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 40031
end <- 50000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset("a.i.o")
library(explore)
# install.packages("devtools")
devtools::install_github("jfoadi/cry")
install.packages("cry")
# Load cry package
library(cry)
# Save CIF data in a named list
datadir <- system.file("extdata",package="cry")
filename <- file.path(datadir,"1dei-sf.cif")
lCIF <- readSF_CIF(filename)
# What's containe in lCIF?
names(lCIF)
# What's the header?
class(lCIF$HEADER)   # It's a list
# Is it a named list?
names(lCIF$HEADER)  # Yes
# What's the space group name for this crystal structure?
print(lCIF$HEADER$HM)
# What's the space group number corresponding to P 21 21 21?
# Use one of cry's functions
xHM <- lCIF$HEADER$HM
translate_SG(xHM,SG_in="xHM",SG_out="number")$msg
# ... and the unit cell parameters?
cpars <- c(lCIF$HEADER$CELL$A$VAL,lCIF$HEADER$CELL$B$VAL,
lCIF$HEADER$CELL$C$VAL,lCIF$HEADER$CELL$ALPHA$VAL,
lCIF$HEADER$CELL$BETA$VAL,lCIF$HEADER$CELL$GAMMA$VAL)
print(cpars)
# The unit cell belongs to the orthorombic system,
# as it should be, due to symmetry (cry function)
print(crystal_system(gn=19))
lCIF
?cry::crystal_system
crystal_system(131)
crystal_family(131)
crystal_family(12)
crystal_family(122)
crystal_family(222)
cryst_symm(121)
z <- .Last.value
class(z)
methods(class = class(z))
lamd <- log(2)/2.2
2810*exp(-3.2*lamd)
devtools::install_github("cj-holmes/paintr")
library(paintr)
img <- 'https://miro.medium.com/max/450/1*1xHqHD8Mbk-m5JviP5-lqw.jpeg'
hadley <- paint_by_numbers(img)
?paint_by_numbers
library(tidyverse)
library(matlab)
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".uter")
z |> str_subset(".ared")
begin <- 10003
end <- 20000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 10093
end <- 20000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 10003
end <- 20000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1 & between(numbers %% 1000, 9000, 1000)]
numbers[isprime(numbers)==1 & between(numbers %% 1000, 900, 1000)]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".raid")
sin(11.2*pi/180)
0.154051 / (2*sin(11.2*pi/180))
0.154051 / (2*sin(11.2*pi/180)) * sqrt(3)
0.154051 / (2*sin(11.2*pi/180)) * sqrt(3) /sqrt(13)
d=.Last.value
0.154051/(2*d)
asin(0.154051/(2*d))
asin(0.154051/(2*d))*180/pi
library(tidyverse)
library(matlab)
begin <- 30007
end <- 40000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 60837
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
source("~/.active-rstudio-document", echo=TRUE)
View(df)
View(map)
0.154051/(2*0.70655/sqrt(3))
0.154051/(2*0.70655/sqrt(3)) |> asin()
0.154051/(2*0.70655/sqrt(3)) |> asin() *180/pi
$d \; = \;\frac{a}{\sqrt {h^2 + k^2 + l^2}}$
-   $N\;=\;N_0e^{-\lambda t}$
$t_{1/2}\;=\;\frac{log_e2}{\lambda}\;=\;\frac{0.693}{\lambda}$
1.6e-13/(3e8)^2
$1MeV = 1.6 \times 10^{-13}J = 1.78 \times 10^{-30}kg$
$Radius\;=\;1.2 \times \sqrt[3]{A}$ in femto-metres (1 fm = $10^{-15}m$)
$(938.272 \times 92 + 939.565 \times 146 - 221743) / 238 = 7.372\; MeV\; per\; nucleon$
23^2+24^2+25^2
sqrt(.Last.value)
library(tidyverse)
library(matlab)
numbers <- 1:1e6
z <- numbers[isprime(numbers)==1]
z1 <- tibble(primes = z)
z1 |> ggplot(aes(primes)) +
geom_density()
z1 |> ggplot(aes(primes)) +
geom_density() +
scale_y_log10()
z1 |> ggplot(aes(primes)) +
geom_density()
numbers <- 1:1e7
z <- numbers[isprime(numbers)==1]
z1 <- tibble(primes = z)
z1 |> ggplot(aes(primes)) +
geom_density()
numbers <- 1:1e3
z <- numbers[isprime(numbers)==1]
?expand.grid
numbers <- 1:1e3
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z)
View(zq)
class(zq)
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
numbers <- 1:1e4
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
numbers <- 1:1e5
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
numbers <- 1:1e4
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
library(tidyverse)
library(matlab)
begin <- 20273
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 20237
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 83207
end <- 83300
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 23287
end <- 100000
my_step <- 10000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".de.a")
z |> str_subset(".rash")
z |> str_subset(".rate")
::: {style="font-size: 80%;"}
library(tidyverse)
library(matlab)
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".ian.")
library(tidyverse)
library(openai)
z <- "A professional digital illustration featuring a confident woman, with a polished appearance. She has medium-length dark hair styled neatly, wearing a business-casual outfit, consisting of a tailored blazer and a soft-colored blouse. The background is a gradient of neutral tones, giving a modern, LinkedIn-style look, with a faint abstract design that suggests professionalism and a digital context."
?openai::create_image
Sys.getenv("OPENAI_API_KEY")
z1 <- openai::create_image(prompt = z)
create_image("An astronaut riding a horse in a photorealistic style")
new_key <- "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"
z1 <- openai::create_image(prompt = z, openai_api_key = new_key)
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
add_headers(Authorization = paste("Bearer", new_key)),
content_type_json(),
encode = "json",
body = list(
model = "gpt-4o-mini",
temperature = 1,
messages = list(list(
role = "user",
content = z
)),
stream = F
)
)
library(httr)
library(jsonlite)
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
add_headers(Authorization = paste("Bearer", new_key)),
content_type_json(),
encode = "json",
body = list(
model = "gpt-4o-mini",
temperature = 1,
messages = list(list(
role = "user",
content = z
)),
stream = F
)
)
response
response[[1]]
response[[2]]
response[[3]]
response[[4]]
response[[5]]
response[[6]]
response[[7]]
response[[8]]
response[[9]]
response[[10]]
response <- POST(
url = "https://api.openai.com/v1/images/generations",
add_headers(Authorization = paste("Bearer", new_key)),
content_type_json(),
encode = "json",
body = list(
model = "dall-e-3",
temperature = 1,
messages = list(list(
role = "user",
content = z
)),
stream = F
)
)
response <- POST(
url = "https://api.openai.com/v1/images/generations",
add_headers(Authorization = paste("Bearer", new_key)),
content_type_json(),
encode = "json",
body = list(
model = "dall-e-3",
temperature = 1,
messages = list(list(
role = "user",
content = z
)),
stream = F
)
)
response
response[[9]]
reponse[[4]]
response$url
response$url |> browseURL()
z1 <- openai::create_image(prompt = z, openai_api_key = new_key)
remotes::install_github("irudnyts/openai", ref = "r6")
remotes::install_github("irudnyts/openai", ref = "r6")
remove.packages("curl")
library(curl)
install.packages("curl")
library(curl)
packageVersion("curl")
library(tidyverse)
library(openai)
z <- "A professional digital illustration featuring a confident woman, with a polished appearance. She has medium-length dark hair styled neatly, wearing a business-casual outfit, consisting of a tailored blazer and a soft-colored blouse. The background is a gradient of neutral tones, giving a modern, LinkedIn-style look, with a faint abstract design that suggests professionalism and a digital context."
new_key <- "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"
z1 <- openai::create_image(prompt = z, openai_api_key = new_key)
create_completion(
model = "ada",
prompt = "Generate a question and an answer"
)
openai
⚠️ Note: ⚠️ OpenAI introduced major changes in package’s version 1.0.0. Since the idea of this package is to mimic OpenAI’s official Python package, from now on, everything will be re-written in object-oriented way. Current implementation will be gradually and gently depricated. One can install the development verion using:
openai
⚠️ Note: ⚠️ OpenAI introduced major changes in package’s version 1.0.0. Since the idea of this package is to mimic OpenAI’s official Python package, from now on, everything will be re-written in object-oriented way. Current implementation will be gradually and gently depricated. One can install the development verion using:
create_chat_completion(
model = "gpt-3.5-turbo",
messages = list(
list(
"role" = "system",
"content" = "You are a helpful assistant."
),
list(
"role" = "user",
"content" = "Who won the world series in 2020?"
),
list(
"role" = "assistant",
"content" = "The Los Angeles Dodgers won the World Series in 2020."
),
list(
"role" = "user",
"content" = "Where was it played?"
)
)
)
voice_sample_ua <- system.file("extdata", "sample-ua.m4a", package = "openai")
create_translation(file = voice_sample_ua, model = "whisper-1")
create_image("An astronaut riding a horse in a photorealistic style")
z1 <- .Last.value
browseURL(z1$data$url)
z <- "A professional digital illustration featuring a confident woman, with a polished appearance. She has medium-length dark hair styled neatly, wearing a business-casual outfit, consisting of a tailored blazer and a soft-colored blouse. The background is a gradient of neutral tones, giving a modern, LinkedIn-style look, with a faint abstract design that suggests professionalism and a digital context."
z1 <- create_image(z)
browseURL(z1$data$url)
z1 <- create_image(z)
browseURL(z1$data$url)
z1 <- create_image(z)
browseURL(z1$data$url)
4/3*pi*(6.6e6)^3
6.6e6*2*pi
4/3*pi*(6.6e6)^3*e-27
4/3*pi*(6.6e6)^3*1e-27
4/3*pi*(6.6e6)^3*1e-27*3e8*3e8
new_key <- Sys.getenv("OPENAI_API_KEY")
z1 <- create_image(z)
usethis::edit_r_environ()
library(tidyverse)
library(openai)
z <- "A professional digital illustration featuring a confident woman, with a polished appearance. She has medium-length dark hair styled neatly, wearing a business-casual outfit, consisting of a tailored blazer and a soft-colored blouse. The background is a gradient of neutral tones, giving a modern, LinkedIn-style look, with a faint abstract design that suggests professionalism and a digital context."
new_key <- Sys.getenv("OPENAI_API_KEY")
z1 <- create_image(z)
new_key
library(tidyverse)
library(matlab)
begin <- 50207
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".last")
z |> str_subset(".elet")
z |> str_subset(".etel")
library(getCRUCLdata)
?getCRUCLdata::getCRUCLdata
library(tidyverse)
library(matlab)
begin <-40003
end <- 50000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <-64003
end <- 65000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".orne")
library(tidyverse)
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset("s.a.h")
library(tidyverse)
library(matlab)
begin <-15557
end <- 20000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <-18559
end <- 19000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <-18191
end <- 19000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
z |> str_subset("sa.as")
