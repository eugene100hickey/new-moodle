my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".rasp")
29*31
library(rentrez)
?rentrez::entrez_search
entrez_search(db="nuccore", term = "GSE788")
library(GEOquery)
z <- getGEO("GSE788")
z
z1 <- z[[1]]
z1
methods(class = class(z1))
exprs(z1)
exprs(z1) |> class()
z2 <- exprs(z1)
mean(z2[, "GSM9024"])
usethis::create_github_token()
gitcreds::gitcreds_set()
library(tidyverse)
library(matlab)
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset("..pal")
library(learnr)
?question
library(exams)
library(exams)
world_sf <- sf::st_as_sf(rworldmap::getMap(resolution = "low"))
lat <- c(seq(from=-90,to=90,by=0.25)) ## creates a sequence -90 to 90 by 0.25
lon <- c(rep(180,length(lat)),rep(-180,length(lat))) # creates a sequence of 180 and -180 longitudes
oceans.df <- data.frame("lon"=lon, "lat"=c(lat,lat)) ## combines the point in a data frame
oceans.sf <- st_as_sf(oceans.df,coords = c("lon","lat"), crs=4326) %>%
st_union() %>% # combines the points into a MULTIPOINT
st_convex_hull() # gets the outline of the points
library(tidyverse)
library(flipbookr)
library(ggtext)
library(worldfootballR)
library(gt)
library(sf)
library(rworldmap)
library(lwgeom)
world_sf <- sf::st_as_sf(rworldmap::getMap(resolution = "low"))
lat <- c(seq(from=-90,to=90,by=0.25)) ## creates a sequence -90 to 90 by 0.25
lon <- c(rep(180,length(lat)),rep(-180,length(lat))) # creates a sequence of 180 and -180 longitudes
oceans.df <- data.frame("lon"=lon, "lat"=c(lat,lat)) ## combines the point in a data frame
oceans.sf <- st_as_sf(oceans.df,coords = c("lon","lat"), crs=4326) %>%
st_union() %>% # combines the points into a MULTIPOINT
st_convex_hull() # gets the outline of the points
oceans_moll.sf <- st_as_sf(oceans.df,coords = c("lon","lat"), crs=4326) %>%
st_transform(crs="+proj=moll") %>% ##
st_union() %>% # combines the points into a MULTIPOINT
st_convex_hull() # gets the outline of the points
my_cols <- c("#008000", "#1aff1a", "#802000", "#24478f", "#e6e600", "#7733ff", "#ff80aa")
ggplot() +
geom_sf(data=oceans_moll.sf, fill="#cce6ff") +
geom_sf(data=world_sf |> st_transform(crs="+proj=moll"),
aes(fill = NAME), show.legend = FALSE) + #BREAK
scale_fill_manual(values = rep(paletteer_d("MexBrewer::Naturaleza", n=7), 35)) + #ROTATE
scale_fill_manual(values = rep(paletteer_d("palettetown::crobat", n=7), 35)) + #ROTATE
scale_fill_manual(values = rep(paletteer_d("lisa::JosefAlbers", n=5), 50)) + #ROTATE
scale_fill_manual(values = rep(my_cols, 35)) +
theme_void() + annotation_scale(location = "bl", width_hint = 0.5) + annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering) #BREAK
library(paletteer)
ggplot() +
geom_sf(data=oceans_moll.sf, fill="#cce6ff") +
geom_sf(data=world_sf |> st_transform(crs="+proj=moll"),
aes(fill = NAME), show.legend = FALSE) + #BREAK
scale_fill_manual(values = rep(paletteer_d("MexBrewer::Naturaleza", n=7), 35)) + #ROTATE
scale_fill_manual(values = rep(paletteer_d("palettetown::crobat", n=7), 35)) + #ROTATE
scale_fill_manual(values = rep(paletteer_d("lisa::JosefAlbers", n=5), 50)) + #ROTATE
scale_fill_manual(values = rep(my_cols, 35)) +
theme_void() + annotation_scale(location = "bl", width_hint = 0.5) + annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering) #BREAK
library(ggspatial)
ggplot() +
geom_sf(data=oceans_moll.sf, fill="#cce6ff") +
geom_sf(data=world_sf |> st_transform(crs="+proj=moll"),
aes(fill = NAME), show.legend = FALSE) + #BREAK
scale_fill_manual(values = rep(paletteer_d("MexBrewer::Naturaleza", n=7), 35)) + #ROTATE
scale_fill_manual(values = rep(paletteer_d("palettetown::crobat", n=7), 35)) + #ROTATE
scale_fill_manual(values = rep(paletteer_d("lisa::JosefAlbers", n=5), 50)) + #ROTATE
scale_fill_manual(values = rep(my_cols, 35)) +
theme_void() + annotation_scale(location = "bl", width_hint = 0.5) + annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering) #BREAK
ggplot() +
geom_sf(data=oceans_moll.sf, fill="#cce6ff") +
geom_sf(data=world_sf |> st_transform(crs="+proj=moll"),
aes(fill = NAME), show.legend = FALSE) + #BREAK
scale_fill_manual(values = rep(paletteer_d("MexBrewer::Naturaleza", n=7), 35)) + #ROTATE
scale_fill_manual(values = rep(paletteer_d("palettetown::crobat", n=7), 35)) + #ROTATE
scale_fill_manual(values = rep(paletteer_d("lisa::JosefAlbers", n=5), 50)) + #ROTATE
scale_fill_manual(values = rep(my_cols, 35)) +
theme_void() +
#annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true", pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"), style = north_arrow_fancy_orienteering)
library(tidyverse)
library(matlab)
begin <- 21003
end <- 22000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 31123
end <- 99000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 52013
end <- 53000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset("a.oid")
library(tidyverse)
library(matlab)
begin <- 55557
end <- 90000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 76009
end <- 77000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".orse")
z |> str_subset(".anon")
z |> str_subset(".a.on")
z |> str_subset(".oyer")
source("~/.active-rstudio-document", echo=TRUE)
spectrum %>% ggplot(aes(two_theta, intensity)) +
geom_line(colour = "#233d26") +
geom_text(data = fcc[index,], aes(x = 2*theta-3, y = height+0.0125, label = hkl), size = 16) +
labs(x = "2θ") +
scale_x_continuous(breaks = seq(15, 55, by = 5), minor_breaks = seq(10, 60, by = 1)) +
theme(axis.title.x = element_text(family = "Roboto"))
sol
View(fcc)
index
fcc[index,]
spectrum <- data.frame(two_theta = two_theta) %>%
mutate(intensity = dnorm(two_theta, mean = 2*fcc$theta, sd = 0.2) *
(0.003+abs(sin(two_theta/harmon_1) * sin(two_theta/harmon_2) * sin(two_theta/harmon_3) / two_theta)) + noise + 1/(30*two_theta)) |>
mutate(my_colour = ifelse(between, two_theta, fcc$theta[index]-0.5, fcc$theta[index]+0.5), peak, no_peak)
spectrum <- data.frame(two_theta = two_theta) %>%
mutate(intensity = dnorm(two_theta, mean = 2*fcc$theta, sd = 0.2) *
(0.003+abs(sin(two_theta/harmon_1) * sin(two_theta/harmon_2) * sin(two_theta/harmon_3) / two_theta)) + noise + 1/(30*two_theta)) |>
mutate(my_colour = ifelse(between(two_theta, fcc$theta[index]-0.5, fcc$theta[index]+0.5), peak, no_peak))
spectrum <- data.frame(two_theta = two_theta) %>%
mutate(intensity = dnorm(two_theta, mean = 2*fcc$theta, sd = 0.2) *
(0.003+abs(sin(two_theta/harmon_1) * sin(two_theta/harmon_2) * sin(two_theta/harmon_3) / two_theta)) + noise + 1/(30*two_theta)) |>
mutate(my_colour = ifelse(between(two_theta, fcc$theta[index]-0.5, fcc$theta[index]+0.5), "peak", "no_peak"))
View(spectrum)
spectrum %>% ggplot(aes(two_theta, intensity)) +
geom_line(aes(colour = my_colour)) +
geom_text(data = fcc[index,], aes(x = 2*theta-3, y = height+0.0125, label = hkl), size = 16) +
labs(x = "2θ") +
scale_x_continuous(breaks = seq(15, 55, by = 5), minor_breaks = seq(10, 60, by = 1)) +
theme(axis.title.x = element_text(family = "Roboto"))
spectrum %>% ggplot(aes(two_theta, intensity)) +
geom_line(aes(colour = my_colour)) +
geom_text(data = fcc[index,], aes(x = 2*theta-3, y = height+0.0125, label = hkl), size = 16) +
labs(x = "2θ") +
scale_fill_manual(values = c("#233d26", "#A62C11"))
spectrum %>% ggplot(aes(two_theta, intensity)) +
geom_line(aes(colour = my_colour)) +
geom_text(data = fcc[index,], aes(x = 2*theta-3, y = height+0.0125, label = hkl), size = 16) +
labs(x = "2θ") +
scale_colour_manual(values = c("#233d26", "#A62C11")) +
scale_x_continuous(breaks = seq(15, 55, by = 5), minor_breaks = seq(10, 60, by = 1)) +
theme(axis.title.x = element_text(family = "Roboto"))
spectrum <- data.frame(two_theta = two_theta) %>%
mutate(intensity = dnorm(two_theta, mean = 2*fcc$theta, sd = 0.2) *
(0.003+abs(sin(two_theta/harmon_1) * sin(two_theta/harmon_2) * sin(two_theta/harmon_3) / two_theta)) + noise + 1/(30*two_theta)) |>
mutate(my_colour = ifelse(between(two_theta/2, fcc$theta[index]-0.5, fcc$theta[index]+0.5), "peak", "no_peak"))
# labels
labels <- fcc$hkl[index]
# solution
sol <- c(fcc$d[index] %>% round(4), lattice %>% round(4))
answer <- c(glue("The value of $d _`r labels`$ is {sol[1]}nm"), glue("The lattice parameter is {sol[2]}nm"))
spectrum %>% ggplot(aes(two_theta, intensity)) +
geom_line(aes(colour = my_colour)) +
geom_text(data = fcc[index,], aes(x = 2*theta-3, y = height+0.0125, label = hkl), size = 16) +
labs(x = "2θ") +
scale_colour_manual(values = c("#233d26", "#A62C11")) +
scale_x_continuous(breaks = seq(15, 55, by = 5), minor_breaks = seq(10, 60, by = 1)) +
theme(axis.title.x = element_text(family = "Roboto"))
library(exams)
exams2moodle("../../Research/EUT-plus/cartegena-2024/quizzes/xray03-lattice-parameter.Rmd", n = 2)
exams2moodle("../../Research/EUT-plus/cartegena-2024/quizzes/xray03-lattice-parameter.Rmd", n = 2)
library(tidyverse)
library(matlab)
begin <- 41003
end <- 42000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 41013
end <- 42000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(sivs)
install.packages("sivs")
library(tidyverse)
library(matlab)
begin <- 20241
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".reat")
z |> str_subset(".anen")
z |> str_subset(".enan")
z |> str_subset("anne.")
z |> str_subset(".r.it")
5000*99/62.5
5/0.0528
z=.Last.value
z*5.49
z*.16
z*52.26
z*36.81
5.49/55
10/44
.9955/0.0042
.9955/0.0042*.227
.9955/0.0042*.227*28
library(msa)
BiocManager::install("msa")
library(msa)
library(tidyverse)
library(matlab)
begin <- 24007
end <- 25000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 42009
end <- 43000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 50429
end <- 60000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 25429
end <- 100000
my_step <- 10000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".ai.e")
.8/.58
.8/3.5
2e4/24
1/.Last.value/4//04^2
1/.Last.value/4/04^2
1/.Last.value/4/0.4^2
2e4/24
1/.Last.value/4/0.4^2
1.3939/0.775
1/4/0.16/756
1/4/0.16/781.25
library(tidyverse)
library(rlang)
library(glue)
# string to append to variable name
suffix <- "A"
# example data frame
dat <- tibble(x = 1:5) %>%
# create new variable with walrus operator
mutate(
"x_{suffix}" := x
)
# view data
dat
# select newly named column
dat %>%
dplyr::select(glue::glue("x_{suffix}"))
library(tidyverse)
library(matlab)
begin <- 30237
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 30238
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 30239
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset("stor.")
z |> str_subset("s.ort")
z |> str_subset("a.ile")
z |> str_subset("ho.ed")
library(tidyverse)
library(matlab)
begin <- 43001
end <- 44000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 40031
end <- 50000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset("a.i.o")
library(explore)
# install.packages("devtools")
devtools::install_github("jfoadi/cry")
install.packages("cry")
# Load cry package
library(cry)
# Save CIF data in a named list
datadir <- system.file("extdata",package="cry")
filename <- file.path(datadir,"1dei-sf.cif")
lCIF <- readSF_CIF(filename)
# What's containe in lCIF?
names(lCIF)
# What's the header?
class(lCIF$HEADER)   # It's a list
# Is it a named list?
names(lCIF$HEADER)  # Yes
# What's the space group name for this crystal structure?
print(lCIF$HEADER$HM)
# What's the space group number corresponding to P 21 21 21?
# Use one of cry's functions
xHM <- lCIF$HEADER$HM
translate_SG(xHM,SG_in="xHM",SG_out="number")$msg
# ... and the unit cell parameters?
cpars <- c(lCIF$HEADER$CELL$A$VAL,lCIF$HEADER$CELL$B$VAL,
lCIF$HEADER$CELL$C$VAL,lCIF$HEADER$CELL$ALPHA$VAL,
lCIF$HEADER$CELL$BETA$VAL,lCIF$HEADER$CELL$GAMMA$VAL)
print(cpars)
# The unit cell belongs to the orthorombic system,
# as it should be, due to symmetry (cry function)
print(crystal_system(gn=19))
lCIF
?cry::crystal_system
crystal_system(131)
crystal_family(131)
crystal_family(12)
crystal_family(122)
crystal_family(222)
cryst_symm(121)
z <- .Last.value
class(z)
methods(class = class(z))
lamd <- log(2)/2.2
2810*exp(-3.2*lamd)
devtools::install_github("cj-holmes/paintr")
library(paintr)
img <- 'https://miro.medium.com/max/450/1*1xHqHD8Mbk-m5JviP5-lqw.jpeg'
hadley <- paint_by_numbers(img)
?paint_by_numbers
library(tidyverse)
library(matlab)
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".uter")
z |> str_subset(".ared")
begin <- 10003
end <- 20000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 10093
end <- 20000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 10003
end <- 20000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1 & between(numbers %% 1000, 9000, 1000)]
numbers[isprime(numbers)==1 & between(numbers %% 1000, 900, 1000)]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".raid")
sin(11.2*pi/180)
0.154051 / (2*sin(11.2*pi/180))
0.154051 / (2*sin(11.2*pi/180)) * sqrt(3)
0.154051 / (2*sin(11.2*pi/180)) * sqrt(3) /sqrt(13)
d=.Last.value
0.154051/(2*d)
asin(0.154051/(2*d))
asin(0.154051/(2*d))*180/pi
library(tidyverse)
library(matlab)
begin <- 30007
end <- 40000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 60837
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
source("~/.active-rstudio-document", echo=TRUE)
View(df)
View(map)
0.154051/(2*0.70655/sqrt(3))
0.154051/(2*0.70655/sqrt(3)) |> asin()
0.154051/(2*0.70655/sqrt(3)) |> asin() *180/pi
$d \; = \;\frac{a}{\sqrt {h^2 + k^2 + l^2}}$
-   $N\;=\;N_0e^{-\lambda t}$
$t_{1/2}\;=\;\frac{log_e2}{\lambda}\;=\;\frac{0.693}{\lambda}$
1.6e-13/(3e8)^2
$1MeV = 1.6 \times 10^{-13}J = 1.78 \times 10^{-30}kg$
$Radius\;=\;1.2 \times \sqrt[3]{A}$ in femto-metres (1 fm = $10^{-15}m$)
$(938.272 \times 92 + 939.565 \times 146 - 221743) / 238 = 7.372\; MeV\; per\; nucleon$
23^2+24^2+25^2
sqrt(.Last.value)
library(tidyverse)
library(matlab)
numbers <- 1:1e6
z <- numbers[isprime(numbers)==1]
z1 <- tibble(primes = z)
z1 |> ggplot(aes(primes)) +
geom_density()
z1 |> ggplot(aes(primes)) +
geom_density() +
scale_y_log10()
z1 |> ggplot(aes(primes)) +
geom_density()
numbers <- 1:1e7
z <- numbers[isprime(numbers)==1]
z1 <- tibble(primes = z)
z1 |> ggplot(aes(primes)) +
geom_density()
numbers <- 1:1e3
z <- numbers[isprime(numbers)==1]
?expand.grid
numbers <- 1:1e3
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z)
View(zq)
class(zq)
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
numbers <- 1:1e4
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
numbers <- 1:1e5
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
numbers <- 1:1e4
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
library(tidyverse)
library(matlab)
begin <- 20273
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 20237
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 83207
end <- 83300
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 23287
end <- 100000
my_step <- 10000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".de.a")
z |> str_subset(".rash")
z |> str_subset(".rate")
