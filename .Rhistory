library(tidyverse)
library(rlang)
library(glue)
# string to append to variable name
suffix <- "A"
# example data frame
dat <- tibble(x = 1:5) %>%
# create new variable with walrus operator
mutate(
"x_{suffix}" := x
)
# view data
dat
# select newly named column
dat %>%
dplyr::select(glue::glue("x_{suffix}"))
library(tidyverse)
library(matlab)
begin <- 30237
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 30238
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 30239
end <- 100000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset("stor.")
z |> str_subset("s.ort")
z |> str_subset("a.ile")
z |> str_subset("ho.ed")
library(tidyverse)
library(matlab)
begin <- 43001
end <- 44000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 40031
end <- 50000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset("a.i.o")
library(explore)
# install.packages("devtools")
devtools::install_github("jfoadi/cry")
install.packages("cry")
# Load cry package
library(cry)
# Save CIF data in a named list
datadir <- system.file("extdata",package="cry")
filename <- file.path(datadir,"1dei-sf.cif")
lCIF <- readSF_CIF(filename)
# What's containe in lCIF?
names(lCIF)
# What's the header?
class(lCIF$HEADER)   # It's a list
# Is it a named list?
names(lCIF$HEADER)  # Yes
# What's the space group name for this crystal structure?
print(lCIF$HEADER$HM)
# What's the space group number corresponding to P 21 21 21?
# Use one of cry's functions
xHM <- lCIF$HEADER$HM
translate_SG(xHM,SG_in="xHM",SG_out="number")$msg
# ... and the unit cell parameters?
cpars <- c(lCIF$HEADER$CELL$A$VAL,lCIF$HEADER$CELL$B$VAL,
lCIF$HEADER$CELL$C$VAL,lCIF$HEADER$CELL$ALPHA$VAL,
lCIF$HEADER$CELL$BETA$VAL,lCIF$HEADER$CELL$GAMMA$VAL)
print(cpars)
# The unit cell belongs to the orthorombic system,
# as it should be, due to symmetry (cry function)
print(crystal_system(gn=19))
lCIF
?cry::crystal_system
crystal_system(131)
crystal_family(131)
crystal_family(12)
crystal_family(122)
crystal_family(222)
cryst_symm(121)
z <- .Last.value
class(z)
methods(class = class(z))
lamd <- log(2)/2.2
2810*exp(-3.2*lamd)
devtools::install_github("cj-holmes/paintr")
library(paintr)
img <- 'https://miro.medium.com/max/450/1*1xHqHD8Mbk-m5JviP5-lqw.jpeg'
hadley <- paint_by_numbers(img)
?paint_by_numbers
library(tidyverse)
library(matlab)
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".uter")
z |> str_subset(".ared")
begin <- 10003
end <- 20000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 10093
end <- 20000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 10003
end <- 20000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1 & between(numbers %% 1000, 9000, 1000)]
numbers[isprime(numbers)==1 & between(numbers %% 1000, 900, 1000)]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".raid")
sin(11.2*pi/180)
0.154051 / (2*sin(11.2*pi/180))
0.154051 / (2*sin(11.2*pi/180)) * sqrt(3)
0.154051 / (2*sin(11.2*pi/180)) * sqrt(3) /sqrt(13)
d=.Last.value
0.154051/(2*d)
asin(0.154051/(2*d))
asin(0.154051/(2*d))*180/pi
library(tidyverse)
library(matlab)
begin <- 30007
end <- 40000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 60837
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
source("~/.active-rstudio-document", echo=TRUE)
View(df)
View(map)
0.154051/(2*0.70655/sqrt(3))
0.154051/(2*0.70655/sqrt(3)) |> asin()
0.154051/(2*0.70655/sqrt(3)) |> asin() *180/pi
$d \; = \;\frac{a}{\sqrt {h^2 + k^2 + l^2}}$
-   $N\;=\;N_0e^{-\lambda t}$
$t_{1/2}\;=\;\frac{log_e2}{\lambda}\;=\;\frac{0.693}{\lambda}$
1.6e-13/(3e8)^2
$1MeV = 1.6 \times 10^{-13}J = 1.78 \times 10^{-30}kg$
$Radius\;=\;1.2 \times \sqrt[3]{A}$ in femto-metres (1 fm = $10^{-15}m$)
$(938.272 \times 92 + 939.565 \times 146 - 221743) / 238 = 7.372\; MeV\; per\; nucleon$
23^2+24^2+25^2
sqrt(.Last.value)
library(tidyverse)
library(matlab)
numbers <- 1:1e6
z <- numbers[isprime(numbers)==1]
z1 <- tibble(primes = z)
z1 |> ggplot(aes(primes)) +
geom_density()
z1 |> ggplot(aes(primes)) +
geom_density() +
scale_y_log10()
z1 |> ggplot(aes(primes)) +
geom_density()
numbers <- 1:1e7
z <- numbers[isprime(numbers)==1]
z1 <- tibble(primes = z)
z1 |> ggplot(aes(primes)) +
geom_density()
numbers <- 1:1e3
z <- numbers[isprime(numbers)==1]
?expand.grid
numbers <- 1:1e3
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z)
View(zq)
class(zq)
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
numbers <- 1:1e4
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
numbers <- 1:1e5
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
numbers <- 1:1e4
z <- numbers[isprime(numbers)==1]
zq <- expand.grid(z, z) |>
mutate(double_prime = Var1*Var2)
zq |> ggplot(aes(double_prime)) +
geom_density()
library(tidyverse)
library(matlab)
begin <- 20273
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 20237
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 83207
end <- 83300
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <- 23287
end <- 100000
my_step <- 10000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".de.a")
z |> str_subset(".rash")
z |> str_subset(".rate")
::: {style="font-size: 80%;"}
library(tidyverse)
library(matlab)
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".ian.")
library(tidyverse)
library(openai)
z <- "A professional digital illustration featuring a confident woman, with a polished appearance. She has medium-length dark hair styled neatly, wearing a business-casual outfit, consisting of a tailored blazer and a soft-colored blouse. The background is a gradient of neutral tones, giving a modern, LinkedIn-style look, with a faint abstract design that suggests professionalism and a digital context."
?openai::create_image
Sys.getenv("OPENAI_API_KEY")
z1 <- openai::create_image(prompt = z)
create_image("An astronaut riding a horse in a photorealistic style")
new_key <- "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"
z1 <- openai::create_image(prompt = z, openai_api_key = new_key)
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
add_headers(Authorization = paste("Bearer", new_key)),
content_type_json(),
encode = "json",
body = list(
model = "gpt-4o-mini",
temperature = 1,
messages = list(list(
role = "user",
content = z
)),
stream = F
)
)
library(httr)
library(jsonlite)
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
add_headers(Authorization = paste("Bearer", new_key)),
content_type_json(),
encode = "json",
body = list(
model = "gpt-4o-mini",
temperature = 1,
messages = list(list(
role = "user",
content = z
)),
stream = F
)
)
response
response[[1]]
response[[2]]
response[[3]]
response[[4]]
response[[5]]
response[[6]]
response[[7]]
response[[8]]
response[[9]]
response[[10]]
response <- POST(
url = "https://api.openai.com/v1/images/generations",
add_headers(Authorization = paste("Bearer", new_key)),
content_type_json(),
encode = "json",
body = list(
model = "dall-e-3",
temperature = 1,
messages = list(list(
role = "user",
content = z
)),
stream = F
)
)
response <- POST(
url = "https://api.openai.com/v1/images/generations",
add_headers(Authorization = paste("Bearer", new_key)),
content_type_json(),
encode = "json",
body = list(
model = "dall-e-3",
temperature = 1,
messages = list(list(
role = "user",
content = z
)),
stream = F
)
)
response
response[[9]]
reponse[[4]]
response$url
response$url |> browseURL()
z1 <- openai::create_image(prompt = z, openai_api_key = new_key)
remotes::install_github("irudnyts/openai", ref = "r6")
remotes::install_github("irudnyts/openai", ref = "r6")
remove.packages("curl")
library(curl)
install.packages("curl")
library(curl)
packageVersion("curl")
library(tidyverse)
library(openai)
z <- "A professional digital illustration featuring a confident woman, with a polished appearance. She has medium-length dark hair styled neatly, wearing a business-casual outfit, consisting of a tailored blazer and a soft-colored blouse. The background is a gradient of neutral tones, giving a modern, LinkedIn-style look, with a faint abstract design that suggests professionalism and a digital context."
new_key <- "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"
z1 <- openai::create_image(prompt = z, openai_api_key = new_key)
create_completion(
model = "ada",
prompt = "Generate a question and an answer"
)
openai
⚠️ Note: ⚠️ OpenAI introduced major changes in package’s version 1.0.0. Since the idea of this package is to mimic OpenAI’s official Python package, from now on, everything will be re-written in object-oriented way. Current implementation will be gradually and gently depricated. One can install the development verion using:
openai
⚠️ Note: ⚠️ OpenAI introduced major changes in package’s version 1.0.0. Since the idea of this package is to mimic OpenAI’s official Python package, from now on, everything will be re-written in object-oriented way. Current implementation will be gradually and gently depricated. One can install the development verion using:
create_chat_completion(
model = "gpt-3.5-turbo",
messages = list(
list(
"role" = "system",
"content" = "You are a helpful assistant."
),
list(
"role" = "user",
"content" = "Who won the world series in 2020?"
),
list(
"role" = "assistant",
"content" = "The Los Angeles Dodgers won the World Series in 2020."
),
list(
"role" = "user",
"content" = "Where was it played?"
)
)
)
voice_sample_ua <- system.file("extdata", "sample-ua.m4a", package = "openai")
create_translation(file = voice_sample_ua, model = "whisper-1")
create_image("An astronaut riding a horse in a photorealistic style")
z1 <- .Last.value
browseURL(z1$data$url)
z <- "A professional digital illustration featuring a confident woman, with a polished appearance. She has medium-length dark hair styled neatly, wearing a business-casual outfit, consisting of a tailored blazer and a soft-colored blouse. The background is a gradient of neutral tones, giving a modern, LinkedIn-style look, with a faint abstract design that suggests professionalism and a digital context."
z1 <- create_image(z)
browseURL(z1$data$url)
z1 <- create_image(z)
browseURL(z1$data$url)
z1 <- create_image(z)
browseURL(z1$data$url)
4/3*pi*(6.6e6)^3
6.6e6*2*pi
4/3*pi*(6.6e6)^3*e-27
4/3*pi*(6.6e6)^3*1e-27
4/3*pi*(6.6e6)^3*1e-27*3e8*3e8
new_key <- Sys.getenv("OPENAI_API_KEY")
z1 <- create_image(z)
usethis::edit_r_environ()
library(tidyverse)
library(openai)
z <- "A professional digital illustration featuring a confident woman, with a polished appearance. She has medium-length dark hair styled neatly, wearing a business-casual outfit, consisting of a tailored blazer and a soft-colored blouse. The background is a gradient of neutral tones, giving a modern, LinkedIn-style look, with a faint abstract design that suggests professionalism and a digital context."
new_key <- Sys.getenv("OPENAI_API_KEY")
z1 <- create_image(z)
new_key
library(tidyverse)
library(matlab)
begin <- 50207
end <- 90000
my_step <- 1000
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".last")
z |> str_subset(".elet")
z |> str_subset(".etel")
library(getCRUCLdata)
?getCRUCLdata::getCRUCLdata
library(tidyverse)
library(matlab)
begin <-40003
end <- 50000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <-64003
end <- 65000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset(".orne")
library(tidyverse)
library(words)
z <- words |> dplyr::filter(word_length == 5) |> pull(word)
z |> str_subset("s.a.h")
library(tidyverse)
library(matlab)
begin <-15557
end <- 20000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <-18559
end <- 19000
my_step <- 10
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
begin <-18191
end <- 19000
my_step <- 100
numbers <- seq(begin, end, by = my_step)
numbers[isprime(numbers)==1]
z |> str_subset("sa.as")
72217440000000001058606/1e22
ln(2)/91404
og(2)/91404
log(2)/91404
log(2)/72217440000000001058606
z <- c(72217440000000001058606, 220752000000000012586422, 3405888000000000000000, 3342816000000000000, 558187200, 3248208000000000, 63072000000000000000000, 1655640000000, 10713600, 6.6, 18.6, 4708800, 56449440000000, 63072000000000000000000, 94608000000000, 3.42, 2082240, 2.74, 801792, 4.6, 2.5, 20498400000000000000, 2352585600, 63392.4, 2.7, 0.57, 23040, 2.1, 0.65, 0.74, 8568, 14824.8, 703252800, 186, 0.2, 443080800000000000, 2377183680000, 0.0031, 120, 881280, 705.6, 0.036, 45.1, 249.6, 558, 318, 140902848000000000, 1074, 89.4, 95869440000000, 7742088000000, 3216672000, 0.00006, 22195036800000000, 50457600000, 223.8, 26.1, 5020531200000, 504, 231474240000, 452541600, 433123.2, 67613184000000, 232420320000, 2765707200, 1033119360000, 686633328, 390, 18.8, 11772388800000, 13629859200, 44, 1503360, 0.89, 10722240000000, 13.6, 10.3, 34223040, 2172830400, 491961600000000, 255, 330350.4, 4.4, 1.48, 19.2, 760332960000, 53, 1617408, 210, 240, 987984, 27648000, 91391328, 20880, 19476, 8, 206970768000, 29160, 864000, 5976, 6.1, 60331521.6, 52, 25970.4, 4446576000, 11.4, 14065920, 2.7, 90129888, 6, 268056000000, 308, 3905280, 316224, 52560, 72, 186, 1194, 1.55, 129600, 51, 183, 11069136000, 11, 21.6, 1834.2, 1797120, 21.1, 0.5, 10.83, 362880, 43519680000, 1461, 4.9, 3633, 1482, 2.4, 28319328000, 3.4, 4.4, 570801600, 51, 38, 1768608, 0.11, 1800, 42840, 412490880, 917697600, 10008, 55.6, 1500, 6.33, 6480, 79200, 27.5, 5.8, 87, 302.4, 1500, 294, 115, 0.88, 2833920, 534, 3.96, 5227200, 426816, 95, 126, 31680, 10, 0.9, 2.52, 1710, 8640, 4380, 0.0365, 23820480, 39.6, 40754880, 247.8, 37, 11, 3438720, 184, 18.3, 555, 83412720, 1200, 0.075, 444, 1.18, 0.107, 0.0101, 28814400, 0.96, 2298, 141480, 4.2, 3480, 27.4, 0.06, 25.8, 0.005, 16200, 3.1, 4.1, 28, 546, 118800, 164.4, 47, 74.4, 45, 0.266, 6.3, 0.2, 523.2, 8683200, 0.0009, 0.025, 6.2, 63, 139.2, 43, 128520, 0.314, 66, 72252, 1.5, 91404, 19080, 4449600, 0.018, 9456, 14.8, 1.05, 3.8, 34.6, 6132, 0.145, 0.3, 15.9, 0.02, 0.0323, 0.119, 0.21, 108, 0.002, 0.022, 0.392, 259200, 1, 0.02, 1620, 0.15, 0.0063, 2700, 240, 0.516, 0.064, 11664, 13)
(z1 <- log(2)/z)
min(z1)
order(z1)
z1[order(z1)]
z[order(z)]
11069136000
11069136000/1e12
3216672000/1e9
3216672000/1e12
67613184000000/1e12
z2 <- c("Nd", "Sm", "Gd", "Sm", "Pm", "Sm", "Hf", "Pb", "Gd", "I", "Te", "Eu", "Gd", "Os", "Dy", "I", "Eu", "Xe", "Gd", "Te", "I", "Pt", "Gd", "Tb", "Xe", "Cs", "Dy", "Te", "I", "Xe", "Dy", "Tb", "Pb", "Ho", "Xe", "Th", "Th", "Te", "Ho", "Pt", "Ho", "I", "Po", "Tb", "Ho", "Er", "U", "Dy", "Yb", "Bi", "U", "Po", "Te", "U", "Ra", "Er", "Yb", "U", "Au", "Th", "Pu", "Bi", "Np", "Am", "Pu", "Pa", "Ac", "Pt", "W", "Pu", "Am", "Os", "Pa", "Hf", "Cm", "Hf", "Er", "Np", "U", "Cm", "Au", "Rn", "Re", "Tm", "Os", "Pu", "Au", "Th", "Pb", "Bi", "Ra", "Bk", "Po", "Po", "At", "Ir", "Pu", "At", "Ac", "Po", "Re", "Th", "Pt", "At", "Am", "Au", "Cm", "Ta", "Pu", "W", "Cm", "Bi", "Pu", "Ra", "Rn", "Pb", "Po", "Bi", "Ta", "Pa", "Tl", "Bi", "Cf", "Pt", "Hg", "Th", "U", "Pt", "Lu", "Hg", "U", "Bk", "Rn", "Ir", "Bi", "Bi", "Re", "Cf", "Os", "Ir", "Cm", "Pb", "Ra", "Es", "Hf", "At", "Am", "Cf", "Cm", "Ac", "Rn", "Bi", "Pt", "At", "Pa", "Tl", "Po", "Bi", "Bi", "Rn", "Fr", "Bi", "Re", "Cm", "Po", "Rn", "Cf", "Bk", "Bi", "Ac", "Pu", "Rn", "Pt", "Pt", "Rn", "Rn", "Am", "Ta", "Es", "Bi", "Es", "Po", "Bi", "Tl", "Es", "At", "Pb", "Rn", "Cf", "Fr", "Re", "At", "Au", "Re", "Ta", "Cf", "Rn", "Pa", "Es", "At", "U", "Fr", "Tl", "Po", "Ir", "Bk", "Tl", "Pb", "Ra", "U", "Es", "Ra", "At", "Rn", "Rn", "Hg", "Bi", "Au", "Th", "Fm", "W", "Pt", "Bi", "Ac", "Am", "At", "Cf", "At", "U", "Fm", "At", "Fm", "Fm", "Md", "Hg", "Fm", "Fr", "Th", "Rn", "Fr", "Es", "Po", "Pb", "Fr", "Fr", "At", "At", "Bi", "Pa", "Pt", "Fr", "Po", "Fm", "At", "Hg", "Es", "Bi", "Au", "Cf", "Np", "Po", "Rn", "Fm", "Ra")
z2[order(z)]
z2
which(z2 == "Gd")
z3 <- c(144, 148, 152, 147, 145, 146, 174, 202, 151, 113, 110, 148, 150, 186, 154, 112, 147, 113, 149, 109, 111, 190, 148, 151, 112, 114, 153, 108, 110, 111, 152, 149, 210, 154, 110, 232, 230, 107, 153, 188, 154, 108, 212, 149, 153, 155, 238, 151, 158, 210, 234, 209, 106, 235, 226, 154, 156, 233, 187, 229, 241, 210, 237, 243, 238, 231, 227, 183, 166, 242, 241, 174, 230, 155, 248, 160, 152, 235, 232, 247, 185, 222, 168, 153, 172, 239, 184, 227, 192, 196, 223, 249, 208, 207, 209, 176, 240, 210, 225, 205, 167, 228, 180, 211, 242, 181, 242, 161, 236, 164, 245, 196, 237, 224, 211, 190, 218, 214, 160, 229, 187, 195, 249, 177, 185, 226, 230, 178, 156, 182, 231, 247, 208, 174, 212, 199, 165, 251, 169, 172, 244, 189, 222, 253, 157, 206, 239, 250, 243, 224, 220, 212, 176, 207, 228, 186, 196, 195, 197, 221, 221, 194, 164, 241, 201, 219, 254, 245, 194, 223, 234, 202, 174, 175, 209, 210, 237, 158, 254, 192, 252, 199, 192, 184, 255, 202, 187, 207, 252, 212, 162, 203, 177, 162, 157, 248, 200, 227, 254, 198, 229, 220, 183, 197, 167, 243, 182, 185, 221, 228, 251, 213, 200, 204, 203, 178, 190, 175, 225, 257, 158, 171, 190, 222, 234, 200, 246, 212, 227, 255, 218, 252, 251, 258, 176, 256, 207, 224, 201, 213, 249, 216, 183, 206, 219, 217, 212, 188, 226, 168, 218, 194, 253, 198, 175, 248, 191, 172, 245, 229, 211, 198, 254, 212)
z3[order(z)]
which(z3 == 152)
z2
z
z1
z1[order(z)]
z2[order(z)]
which(z2 == "Hf")
z3[order(z)]
which(z3 == 174)
which(z2 == "Pt")
which(z3 == 190)
which(z3 == 147)
which(z2 == "Sm")
which(z3 == 232)
which(z2 == "Th")
which(z3 == 238)
which(z2 == "U")
which(z3 == 235)
which(z3 == 146)
which(z2 == Sm)
which(z2 == "Sm")
which(z2 == "Cm")
which(z3 == 247)
z
z1
which(z3 == 241)
which(z2 == "Am")
z
which(z3 == 247)
which(z2 == "Cm")
z[80]
threhold <- z[80]
z[z<threhold]
z<threhold
index <- z<threhold
sum(!index)
threhold <- z[80]+1
index <- z<threhold
sum(!index)
z1
z2
z2[index]
